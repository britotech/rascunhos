package tech.brito.apijava8.service;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import tech.brito.apijava8.exceptions.ImovelNaoEncontradoException;
import tech.brito.apijava8.model.Imovel;
import tech.brito.apijava8.repositories.ImovelRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
public class ImovelServiceImplTest {

    @Autowired
    private ImovelServiceImpl imovelService;

    @MockBean
    private ImovelRepository imovelRepository;

    private static List<Imovel> imoveis;

    @BeforeAll
    public static void setup() {
        System.out.println("**********************************************");
        System.out.println("**********************************************");
        System.out.println("**********************************************");
        System.out.println("inicializou");
        imoveis = new ArrayList<>();
        imoveis.add(new Imovel(1L, "CATEDRAL"));
        imoveis.add(new Imovel(2L, "IGREJA"));
        imoveis.add(new Imovel(3L, "POSTO DE SAUDE"));
    }

    @Test
    public void testObterImovel() {
        Imovel catedral = imoveis.get(0);
        when(imovelRepository.findById(1L)).thenReturn(Optional.of(catedral));

        Imovel imovelConsultado = imovelService.obterImovel(1L);
        assertEquals(catedral, imovelConsultado);
        verify(imovelRepository, times(1)).findById(1L);
    }

    @Test()
    public void testObterImovelErro() {
        ImovelNaoEncontradoException ex = assertThrows(ImovelNaoEncontradoException.class, () -> imovelService.obterImovel(5L));
        assertEquals("Imovel n√£o encontrado", ex.getMessage());
    }

    @Test
    public void testListar() {
        when(imovelRepository.findAll()).thenReturn(imoveis);
        List<Imovel> imoveisConsultados = imovelService.listar();
        assertEquals(imoveis, imoveisConsultados);
    }

    @Test
    public void testSalvar() {
        Imovel prefeitura = new Imovel(5L, "PREFEITURA");
        when(imovelRepository.save(any(Imovel.class))).thenReturn(prefeitura);

        assertEquals(prefeitura, imovelService.salvar(prefeitura));
    }
}
