public class GerenteExcecaoSpecification implements Specification<GerenteExcecao> {
    
    private final String gerenteChave;
    private final String gerenteNome;
    private final String empresaCodigo;
    private final Boolean considerarHistorico;
    
    public GerenteExcecaoSpecification(String gerenteChave, String gerenteNome, String empresaCodigo, Boolean considerarHistorico) {
        this.gerenteChave = gerenteChave;
        this.gerenteNome = gerenteNome;
        this.empresaCodigo = empresaCodigo;
        this.considerarHistorico = considerarHistorico;
    }
    
    @Override
    public Predicate toPredicate(Root<GerenteExcecao> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
        List<Predicate> predicates = new ArrayList<>();
        
        Optional.ofNullable(gerenteChave)
            .ifPresent(chave -> predicates.add(builder.equal(root.get("gerente").get("chave"), chave)));
        
        Optional.ofNullable(gerenteNome)
            .ifPresent(nome -> predicates.add(builder.like(builder.lower(root.get("gerente").get("nome")), "%" + nome.toLowerCase() + "%")));
        
        Optional.ofNullable(empresaCodigo)
            .ifPresent(codigo -> predicates.add(builder.equal(root.get("empresaExcecao").get("codigo"), codigo)));
        
        if (!Boolean.TRUE.equals(considerarHistorico)) {
            LocalDate hoje = LocalDate.now();
            predicates.add(builder.or(
                builder.greaterThanOrEqualTo(root.get("vigencia").get("fim"), hoje),
                builder.isNull(root.get("vigencia").get("fim"))
            ));
        }
        
        return builder.and(predicates.toArray(new Predicate[predicates.size()]));
    }
}
